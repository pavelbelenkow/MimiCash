import Foundation

// MARK: - Models

struct TransactionRequest {
    let accountId: Int
    let categoryId: Int
    let amount: String
    let transactionDate: String
    let comment: String?
}

struct TransactionCreateResponse {
    let id: Int
    let accountId: Int
    let categoryId: Int
    let amount: String
    let transactionDate: String
    let comment: String?
}

struct TransactionUpdateResponse {
    let id: Int
    let account: BankAccount
    let category: Category
    let amount: String
    let transactionDate: String
    let comment: String?
}

// MARK: - TransactionsService Protocol

protocol TransactionsService {
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ `id` —Å—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç `startDate` –¥–æ `endDate`
    func fetchTransactions(
        accountId: Int,
        from startDate: Date,
        to endDate: Date
    ) async throws -> [Transaction]
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ `TransactionRequest`
    func post(request: TransactionRequest) async throws -> Transaction
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ `TransactionRequest` –∏ `id` —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    func update(transactionId: Int, request: TransactionRequest) async throws -> Transaction
    
    /// –£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ `id` —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    func delete(transactionId: Int) async throws
}

final class TransactionsServiceImp: TransactionsService {
    
    private static var transactions: [Transaction] = [
        // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        Transaction(
            id: 1,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 50000, currency: "RUB"),
            category: Category(id: 1, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üíº", isIncome: .income),
            amount: 120000,
            transactionDate: Date(),
            comment: "–ú–∞–π—Å–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"
        ),
        Transaction(
            id: 2,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 40000, currency: "RUB"),
            category: Category(id: 11, name: "–ü—Ä–æ–¥—É–∫—Ç—ã", emoji: "üçè", isIncome: .outcome),
            amount: 2500.50,
            transactionDate: Date(),
            comment: "–ú–∞–≥–Ω–∏—Ç, –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"
        ),
        Transaction(
            id: 3,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 37500, currency: "RUB"),
            category: Category(id: 12, name: "–ö–∞—Ñ–µ", emoji: "‚òïÔ∏è", isIncome: .outcome),
            amount: 450.00,
            transactionDate: Date(),
            comment: "–ö–æ—Ñ–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏"
        ),
        Transaction(
            id: 4,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 37050, currency: "RUB"),
            category: Category(id: 25, name: "–ü–∏—Ç–æ–º—Ü—ã", emoji: "üêï", isIncome: .outcome),
            amount: 1200.00,
            transactionDate: Date(),
            comment: "–ö–æ—Ä–º –¥–ª—è —Å–æ–±–∞–∫–∏"
        ),
        
        // –í—á–µ—Ä–∞—à–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        Transaction(
            id: 5,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 35850, currency: "RUB"),
            category: Category(id: 14, name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞", emoji: "üè†", isIncome: .outcome),
            amount: 30000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24),
            comment: "–ê—Ä–µ–Ω–¥–∞ –∑–∞ –∏—é–Ω—å"
        ),
        Transaction(
            id: 6,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 5850, currency: "RUB"),
            category: Category(id: 6, name: "–ö—ç—à–±–µ–∫", emoji: "üí≥", isIncome: .income),
            amount: 150.25,
            transactionDate: Date().addingTimeInterval(-3600 * 24),
            comment: "–ö—ç—à–±–µ–∫ —Å –∫–∞—Ä—Ç—ã"
        ),
        Transaction(
            id: 7,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 6000, currency: "RUB"),
            category: Category(id: 17, name: "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å", emoji: "üì±", isIncome: .outcome),
            amount: 800.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24),
            comment: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ú–¢–°"
        ),
        
        // –ù–µ–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        Transaction(
            id: 8,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 5200, currency: "RUB"),
            category: Category(id: 15, name: "–ó–¥–æ—Ä–æ–≤—å–µ", emoji: "üíä", isIncome: .outcome),
            amount: 1200.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 3),
            comment: "–ê–ø—Ç–µ–∫–∞, –≤–∏—Ç–∞–º–∏–Ω—ã"
        ),
        Transaction(
            id: 9,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 4000, currency: "RUB"),
            category: Category(id: 20, name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", emoji: "üé¨", isIncome: .outcome),
            amount: 1200.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 5),
            comment: "–ö–∏–Ω–æ —Å –¥—Ä—É–∑—å—è–º–∏"
        ),
        Transaction(
            id: 10,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 2800, currency: "RUB"),
            category: Category(id: 2, name: "–ü—Ä–µ–º–∏—è", emoji: "üèÜ", isIncome: .income),
            amount: 25000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 7),
            comment: "–ü—Ä–µ–º–∏—è –∑–∞ –ø—Ä–æ–µ–∫—Ç"
        ),
        
        // –ú–µ—Å—è—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        Transaction(
            id: 11,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 27800, currency: "RUB"),
            category: Category(id: 13, name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", emoji: "üöó", isIncome: .outcome),
            amount: 500.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 15),
            comment: "–ú–æ–π–∫–∞ –º–∞—à–∏–Ω—ã"
        ),
        Transaction(
            id: 12,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 27300, currency: "RUB"),
            category: Category(id: 22, name: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", emoji: "üìö", isIncome: .outcome),
            amount: 15000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 20),
            comment: "–ö—É—Ä—Å—ã –ø–æ SwiftUI"
        ),
        Transaction(
            id: 13,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 12300, currency: "RUB"),
            category: Category(id: 4, name: "–î–∏–≤–∏–¥–µ–Ω–¥—ã", emoji: "üè¶", isIncome: .income),
            amount: 5000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 25),
            comment: "–î–∏–≤–∏–¥–µ–Ω–¥—ã –ø–æ –∞–∫—Ü–∏—è–º"
        ),
        
        // –°—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        Transaction(
            id: 14,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 17300, currency: "RUB"),
            category: Category(id: 23, name: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", emoji: "‚úàÔ∏è", isIncome: .outcome),
            amount: 50000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 45),
            comment: "–û—Ç–ø—É—Å–∫ –≤ –¢—É—Ä—Ü–∏–∏"
        ),
        Transaction(
            id: 15,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: -32700, currency: "RUB"),
            category: Category(id: 8, name: "–ü—Ä–æ–¥–∞–∂–∞", emoji: "üì¶", isIncome: .income),
            amount: 15000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 60),
            comment: "–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ –ê–≤–∏—Ç–æ"
        ),
        Transaction(
            id: 16,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: -17700, currency: "RUB"),
            category: Category(id: 24, name: "–¢–µ—Ö–Ω–∏–∫–∞", emoji: "üñ•Ô∏è", isIncome: .outcome),
            amount: 45000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 90),
            comment: "–ù–æ–≤—ã–π MacBook"
        ),
        Transaction(
            id: 17,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: -62700, currency: "RUB"),
            category: Category(id: 5, name: "–ü—Ä–æ—Ü–µ–Ω—Ç—ã", emoji: "üí∞", isIncome: .income),
            amount: 250.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 120),
            comment: "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥—É"
        ),
        Transaction(
            id: 18,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: -62950, currency: "RUB"),
            category: Category(id: 30, name: "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", emoji: "üôè", isIncome: .outcome),
            amount: 1000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 150),
            comment: "–ü–æ–º–æ—â—å –ø—Ä–∏—é—Ç—É"
        ),
        Transaction(
            id: 19,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: -63950, currency: "RUB"),
            category: Category(id: 31, name: "–®—Ç—Ä–∞—Ñ", emoji: "üö®", isIncome: .outcome),
            amount: 1500.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 180),
            comment: "–®—Ç—Ä–∞—Ñ –∑–∞ –ø–∞—Ä–∫–æ–≤–∫—É"
        ),
        Transaction(
            id: 20,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: -65450, currency: "RUB"),
            category: Category(id: 7, name: "–ü–æ–¥–∞—Ä–æ–∫", emoji: "üéÅ", isIncome: .income),
            amount: 5000.00,
            transactionDate: Date().addingTimeInterval(-3600 * 24 * 200),
            comment: "–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"
        ),
        
        // –ë—É–¥—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        Transaction(
            id: 21,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: -60450, currency: "RUB"),
            category: Category(id: 2, name: "–ü—Ä–µ–º–∏—è", emoji: "üèÜ", isIncome: .income),
            amount: 30000.00,
            transactionDate: Date().addingTimeInterval(3600 * 24 * 7),
            comment: "–ü—Ä–µ–º–∏—è –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª"
        ),
        Transaction(
            id: 22,
            account: BankAccount(id: 1, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: -30450, currency: "RUB"),
            category: Category(id: 14, name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞", emoji: "üè†", isIncome: .outcome),
            amount: 30000.00,
            transactionDate: Date().addingTimeInterval(3600 * 24 * 15),
            comment: "–ê—Ä–µ–Ω–¥–∞ –∑–∞ –∏—é–ª—å"
        )
    ]
    
    func fetchTransactions(
        accountId: Int,
        from startDate: Date,
        to endDate: Date
    ) async throws -> [Transaction] {
        Self.transactions.filter {
            $0.account.id == accountId &&
            $0.transactionDate >= startDate &&
            $0.transactionDate <= endDate
        }
    }
    
    func post(request: TransactionRequest) async throws -> Transaction {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        let response = TransactionCreateResponse(
            id: Self.transactions.count + 1,
            accountId: request.accountId,
            categoryId: request.categoryId,
            amount: request.amount,
            transactionDate: request.transactionDate,
            comment: request.comment
        )
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
        let account = Self.transactions.first { $0.account.id == response.accountId }?.account ?? 
            BankAccount(id: response.accountId, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", balance: 0, currency: "RUB")
        
        let category = Self.transactions.first { $0.category.id == response.categoryId }?.category ??
            Category(id: response.categoryId, name: "–î—Ä—É–≥–æ–µ", emoji: "ü§∑‚Äç‚ôÇÔ∏è", isIncome: .outcome)
        
        let transaction = Transaction(
            id: response.id,
            account: account,
            category: category,
            amount: Decimal(string: response.amount) ?? 0,
            transactionDate: ISO8601DateFormatter.isoDateFormatter.date(from: response.transactionDate) ?? Date(),
            comment: response.comment
        )
        
        Self.transactions.append(transaction)
        return transaction
    }
    
    func update(transactionId: Int, request: TransactionRequest) async throws -> Transaction {
        guard let index = Self.transactions.firstIndex(where: { $0.id == transactionId }) else {
            throw NSError(domain: "NotFound", code: 404)
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ categoryId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        let newCategory = Self.transactions.first { $0.category.id == request.categoryId }?.category ??
            Category(id: request.categoryId, name: "–î—Ä—É–≥–æ–µ", emoji: "ü§∑‚Äç‚ôÇÔ∏è", isIncome: .outcome)
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        let response = TransactionUpdateResponse(
            id: transactionId,
            account: Self.transactions[index].account,
            category: newCategory, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            amount: request.amount,
            transactionDate: request.transactionDate,
            comment: request.comment
        )
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Ç–≤–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        let transaction = Transaction(
            id: response.id,
            account: response.account,
            category: response.category,
            amount: Decimal(string: response.amount) ?? 0,
            transactionDate: ISO8601DateFormatter.isoDateFormatter.date(from: response.transactionDate) ?? Date(),
            comment: response.comment
        )
        
        Self.transactions[index] = transaction
        return transaction
    }
    
    func delete(transactionId: Int) async throws {
        Self.transactions.removeAll { $0.id == transactionId }
    }
}
